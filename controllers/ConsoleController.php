<?php
namespace grozzzny\sitemap\controllers;


use grozzzny\sitemap\components\Sitemap;
use grozzzny\sitemap\Module;
use yii\console\Controller;
use Yii;
use yii\helpers\FileHelper;

class ConsoleController extends Controller
{

    /**
     * @var Sitemap
     */
    protected $sitemap;

    public $lastmodStaticPage = ''; // Y-m-d

    /**
     * @var Module
     */
    public $module;

    public $sitemap_index = '/sitemap.xml';

    public $sitemap_pages = '/sitemaps/sitemap_pages.xml';

    public $sitemap_sections = '/sitemaps/sitemap_sections.xml';

    public $data_sitemap;

    public function runAction($id, $params = [])
    {
        Yii::setAlias('@sitemap', Yii::getAlias('@vendor/grozzzny/sitemap'));

        $this->sitemap = new Sitemap($this->module->domain, Yii::getAlias('@webroot'));

        return parent::runAction($id, $params); // TODO: Change the autogenerated stub
    }

    public function install()
    {
        $this->createDirectorySitemaps();
        $this->createStylesheet();
        $this->createNewSitemapIndex();
        $this->createSitemapIndexPages();
    }

    protected function createDirectorySitemaps()
    {
        $dir = Yii::getAlias('@webroot/sitemaps');
        if(!file_exists($dir)) FileHelper::createDirectory($dir);
    }

    protected function createStylesheet()
    {
        $stylesheet_main = Yii::getAlias('@sitemap/components/main-sitemap.xsl');
        $stylesheet = Yii::getAlias('@webroot/main-sitemap.xsl');
        if(!file_exists($stylesheet)) {
            copy($stylesheet_main, $stylesheet);

            $text = file_get_contents($stylesheet);
            $text = preg_replace('/{generatedByLink}/', $this->module->generatedByLink, $text);
            $text = preg_replace('/{generatedByName}/', $this->module->generatedByName, $text);
            file_put_contents($stylesheet, $text);
        }
    }

    protected function createNewSitemapIndex()
    {
        $mainSitemapIndex = Yii::getAlias('@webroot/'.$this->sitemap_index);
        if(!file_exists($mainSitemapIndex)) $this->sitemap->createNewSitemapIndex($this->sitemap_index);
    }

    protected function createSitemapIndexPages()
    {
        $mainSitemapPages = Yii::getAlias('@webroot/'.$this->sitemap_pages);
        if(!file_exists($mainSitemapPages)) $this->sitemap->createNewSitemap($this->sitemap_pages);

        if(!$this->sitemap->hasSitemapIndex($this->sitemap_pages, $this->sitemap_index)) $this->sitemap->insertSitemapIndex($this->sitemap_pages, $this->sitemap_index);
    }

    public function actionStaticPages()
    {
        $dir = Yii::getAlias('@webroot/'.$this->sitemap_pages);
        if(file_exists($dir)) unlink($dir);

        $this->install();

        foreach ($this->staticPages as $pages){
            $this->sitemap->insertSitemap($this->sitemap_pages, $pages['loc'], $pages['lastmod'], $pages['changefreq'], $pages['priority']);
        }

        $this->sitemap->updateSitemapIndex($this->sitemap_pages, $this->sitemap_index, $this->lastmodStaticPage);
    }

    public function actionUpdate()
    {
        $this->install();

        if(!$this->sitemap->hasSitemapIndex($this->sitemap_sections, $this->sitemap_index)) $this->sitemap->insertSitemapIndex($this->sitemap_sections, $this->sitemap_index);

        //Создаем sitemap index
        $this->sitemap->createNewSitemapIndex($this->sitemap_sections);

        //Обновляем в главном sitemap дату sitemap_index_objects.xml
        $this->sitemap->updateSitemapIndex($this->sitemap_sections, $this->sitemap_index);

        $this->getDataSitemap();

        //Проходим по массиву и создаем множество sitemapOV по патерну
        $this->sitemap->generateSitemap($this->data_sitemap, '/sitemaps/sitemap_section_#KEY.xml', $this->sitemap_sections);

    }


    /**
     * Метод формирует свойство $this->data_sitemap
     *
     * data_sitemap[$object->user_id][] = [
     *       'loc' => http://www.example.com/,
     *       'lastmod' => 2005-01-01,
     *       'changefreq' => always hourly daily weekly monthly yearly never,
     *       'priority' => 0.8,
     *   ]
     */
    public function getDataSitemap()
    {
//        $this->getDataArticles();
    }
}